From 0ffc68a4d2fec6ad246e60f3a4d5a0b3b489733e Mon Sep 17 00:00:00 2001
From: Khem Raj <raj.khem@gmail.com>
Date: Wed, 7 Nov 2012 11:51:26 -0500
Subject: [PATCH] Fix hardfloat detection

gcc has a builtin define to denote hard abi when in use, e.g. when
using -mfloat-abi=hard it will define __ARM_PCS_VFP to 1 and therefore
we should check that to determine which calling convention is in use
and not __VFP_FP__ which merely indicates presence of VFP unit

The fix has been provided by Khem Raj <raj.khem@gmail.com>

Updated to v0.8 branch and resubmitted by Jason Kridner <jdk@ti.com>

Upstream-Status: Forwarded
---
 deps/v8/src/platform-linux.cc |    4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/deps/v8/src/platform-linux.cc b/deps/v8/src/platform-linux.cc
index ed9eb79..10d1879 100644
--- a/deps/v8/src/platform-linux.cc
+++ b/deps/v8/src/platform-linux.cc
@@ -170,7 +170,7 @@ bool OS::ArmCpuHasFeature(CpuFeature feature) {
 // calling this will return 1.0 and otherwise 0.0.
 static void ArmUsingHardFloatHelper() {
   asm("mov r0, #0":::"r0");
-#if defined(__VFP_FP__) && !defined(__SOFTFP__)
+#if defined(__ARM_PCS_VFP) && !defined(__SOFTFP__)
   // Load 0x3ff00000 into r1 using instructions available in both ARM
   // and Thumb mode.
   asm("mov r1, #3":::"r1");
@@ -195,7 +195,7 @@ static void ArmUsingHardFloatHelper() {
 #else
   asm("vmov d0, r0, r1");
 #endif  // __thumb__
-#endif  // defined(__VFP_FP__) && !defined(__SOFTFP__)
+#endif  // defined(__ARM_PCS_VFP) && !defined(__SOFTFP__)
   asm("mov r1, #0":::"r1");
 }
 
-- 
1.7.9.5

